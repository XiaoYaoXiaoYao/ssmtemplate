<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task-3.0.xsd">

<!--    &lt;!&ndash;spring中配置注解的扫描&ndash;&gt;-->
<!--    <context:component-scan base-package="cn.xiaoyao.ssm"/>-->


<!--    &lt;!&ndash;spring中整合mybatis&ndash;&gt;-->
<!--    &lt;!&ndash;-->
<!--        需要spring来管理数据源信息。-->
<!--        需要spring通过单例方式管理SqlSessionFactory。-->
<!--        使用SqlSessionFactory创建SqlSession。（spring和mybatis整合自动完成）-->
<!--        持久层的mapper都需要由spring进行管理，spring和mybatis整合生成mapper代理对象。-->
<!--     &ndash;&gt;-->

<!--    &lt;!&ndash;配置数据源&ndash;&gt;-->
<!--    <bean id="druidDataSourceFactory" class="com.alibaba.druid.pool.DruidDataSource">-->
<!--        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>-->
<!--        <property name="url" value="jdbc:mysql://127.0.0.1:3306/ssm_db?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true"/>-->
<!--        <property name="username" value="root"/>-->
<!--        <property name="password" value="root"/>-->
<!--    </bean>-->

<!--    &lt;!&ndash;配置SqlSessionFactory&ndash;&gt;-->
<!--    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
<!--        &lt;!&ndash;映射数据源&ndash;&gt;-->
<!--        <property name="dataSource" ref="druidDataSourceFactory"/>-->
<!--        &lt;!&ndash;加载配置文件&ndash;&gt;-->
<!--        <property name="configLocation" value="classpath:mybatis-spring.xml"/>-->
<!--        &lt;!&ndash;映射mapper文件&ndash;&gt;-->
<!--        <property name="mapperLocations" >-->
<!--            <list>-->
<!--                <value>classpath:mapper/*.xml</value>-->
<!--            </list>-->
<!--        </property>-->
<!--    </bean>-->

<!--    <bean  class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
<!--        <property name="basePackage" value="cn.xiaoyao.ssm.dao"/>-->
<!--        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>-->

<!--    </bean>-->


<!--    <bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">-->
<!--        <property name="location" value="resource.properties"></property>-->
<!--        <property name="fileEncoding" value="UTF-8"></property>-->
<!--    </bean>-->

    <bean class="cn.xiaoyao.ssm.config.beanFactoryPostProcesser.BeanFactoryPostProcesserConfig">
        <property name="location" value="resource.properties"/>
        <property name="fileEncoding" value="UTF-8"/>
    </bean>

    <bean class="cn.xiaoyao.ssm.config.beanPostProcesser.MyBeanPostProcesser"/>




    <bean  id="user" class="cn.xiaoyao.ssm.pojo.User">
        <property name="userName" value="${my.name}"/>
        <property name="sex" value="${my.sex}"/>
        <property name="address" value="${my.address}"/>

    </bean>


    <!--配置BeanFactoryPostProcesser的实现类,实现在bean实例化之前对于BeanDefinition的修改-->
    <bean id="propertyPlaceholderConfigurer"
          class="cn.xiaoyao.ssm.config.beanFactoryPostProcesser.MyBeanFactoryPostProcesser">
        <property name="location"
                  value="classpath:placeholder.properties"/>
        <property name="fileEncoding" value="UTF-8"/>
    </bean>

    <bean class="cn.xiaoyao.ssm.config.beanPostProcesser.MyBeanPostProcesser"/>


    <bean id="user" class="cn.xiaoyao.ssm.pojo.User" init-method="initUser" destroy-method="destoryUser">
        <property name="userName" value="${my.name}"/>
        <property name="sex" value="${my.sex}"/>
    </bean>
    




</beans>